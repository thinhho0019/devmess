name: CI/CD Pipeline webchat devmess

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # ---------- FRONTEND (React Vite) ----------
  frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test -- --watchAll=false

      - name: Create .env file for production
        env:
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}

          VITE_API_URL: https://devmess.cloud/api/v1
        run: |
          echo "VITE_WS_URL=${VITE_WS_URL}" > .env
          echo "VITE_API_URL=${VITE_API_URL}" >> .env

      - name: Build Vite project
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: client/dist

  # ---------- BACKEND (Go) ----------
  backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        run: go mod tidy

      - name: Run Go tests
        run: go test ./...

      - name: Build Go binary
        run: go build -o app main.go

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: server/app

  # ---------- DEPLOY ----------
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-binary
          path: ./server_bin

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend_dist

      - name: Copy files to VPS via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "frontend_dist,server_bin/app,server_env/.env"
          target: /var/www/devmess

      - name: Deploy backend .env via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cat > /var/www/devmess/.env <<EOF
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}
            DEFAULT_URL=${{ secrets.DEFAULT_URL }}
            RESET_DB=false
            BASE_URL=https://devmess.cloud/api/v1
            DEFAULT_URL_SERVER=${{ secrets.DEFAULT_URL_SERVER }}
            DEFAULT_URL=${{ secrets.DEFAULT_URL }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            SPACES_KEY=${{ secrets.SPACES_KEY }}
            SPACES_SECRET=${{ secrets.SPACES_SECRET }}
            SPACES_REGION=${{ secrets.SPACES_REGION }}
            SPACES_BUCKET=${{ secrets.SPACES_BUCKET }}
            SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }}
            EOF

            chmod 600 /var/www/devmess/.env
            echo "✅ .env file created on server"

      - name: Setup Redis & PostgreSQL on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # ---------- Redis ----------
            if ! command -v redis-server &> /dev/null; then
              echo "➡️ Installing Redis..."
              sudo apt update -y && sudo apt install -y redis-server
            fi
            sudo systemctl enable redis
            sudo systemctl start redis

            # ---------- PostgreSQL ----------
            if ! command -v psql &> /dev/null; then
              echo "➡️ Installing PostgreSQL..."
              sudo apt update -y && sudo apt install -y postgresql postgresql-contrib
              sudo systemctl enable postgresql
              sudo systemctl start postgresql
            fi

            echo "➡️ Checking PostgreSQL user and database..."

            # ⚙️ Tạo user nếu chưa có
            if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${{ secrets.DB_USER }}'" | grep -q 1; then
              echo "➡️ Creating user ${{ secrets.DB_USER }}"
              sudo -u postgres psql -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"
            else
              echo "ℹ️ User ${{ secrets.DB_USER }} already exists"
            fi

            # ⚙️ Cấp toàn quyền cho user
            sudo -u postgres psql -c "ALTER USER ${{ secrets.DB_USER }} WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD '${{ secrets.DB_PASSWORD }}';"

            # ⚙️ Tạo database nếu chưa có
            if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "${{ secrets.DB_NAME }}"; then
              echo "➡️ Creating database ${{ secrets.DB_NAME }}"
              sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DB_NAME }} OWNER ${{ secrets.DB_USER }};"
            else
              echo "ℹ️ Database ${{ secrets.DB_NAME }} already exists"
            fi

            # ⚙️ Cấp quyền đầy đủ
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DB_NAME }} TO ${{ secrets.DB_USER }};"

            echo "✅ PostgreSQL setup completed."

      - name: Deploy Backend & Setup Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/devmess

            echo "➡️ Setting up backend service..."

            chmod +x server_bin/app

            # Setup systemd service with proper logging
            sudo bash -c 'cat > /etc/systemd/system/devmess-backend.service <<EOF
            [Unit]
            Description=Go Backend for Devmess
            After=network.target postgresql.service redis.service
            Wants=postgresql.service redis.service

            [Service]
            User=root
            WorkingDirectory=/var/www/devmess
            ExecStart=/var/www/devmess/server_bin/app
            EnvironmentFile=/var/www/devmess/.env
            Restart=always
            RestartSec=5

            # Logging
            StandardOutput=journal
            StandardError=journal
            SyslogIdentifier=devmess-backend

            [Install]
            WantedBy=multi-user.target
            EOF'

            sudo systemctl daemon-reload
            sudo systemctl enable devmess-backend.service
            sudo systemctl stop devmess-backend.service || true
            sleep 2
            sudo systemctl start devmess-backend.service

            # Wait for backend to start
            echo "⏳ Waiting for backend to start..."
            for i in {1..10}; do
              if curl -s http://127.0.0.1:8080/api/v1/health > /dev/null 2>&1; then
                echo "✅ Backend is running!"
                break
              fi
              echo "Waiting... attempt $i/10"
              sleep 2
            done

            # Check backend status
            sudo systemctl status devmess-backend.service --no-pager || true

            # Show recent logs
            echo "📋 Recent backend logs:"
            sudo journalctl -u devmess-backend.service -n 20 --no-pager || true

            echo "✅ Backend service configured."

            # ---------- Setup Nginx ----------
            if ! command -v nginx &> /dev/null; then
              echo "➡️ Installing Nginx..."
              sudo apt update -y && sudo apt install -y nginx
            fi

            # Remove default nginx site to avoid conflicts
            sudo rm -f /etc/nginx/sites-enabled/default

            sudo bash -c 'cat > /etc/nginx/sites-available/devmess.conf <<'\''EOF'\''
            server {
                listen 80;
                server_name devmess.cloud www.devmess.cloud;

                # Redirect all HTTP to HTTPS
                return 301 https://$host$request_uri;
            }

            server {
                listen 443 ssl;
                server_name devmess.cloud www.devmess.cloud;

                ssl_certificate /etc/letsencrypt/live/devmess.cloud/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/devmess.cloud/privkey.pem;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers HIGH:!aNULL:!MD5;

                location /api/ {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                location /ws/ {
                    proxy_pass http://127.0.0.1:8080/ ;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                }
                    location / {
                try_files $uri $uri/ /index.html;
              }
              # Custom error pages
              error_page 502 503 504 /50x.html;
              location = /50x.html {
                root /usr/share/nginx/html;
              }
                
            }

            # server {
            #   listen 80 default_server;
            #   listen [::]:80 default_server;
            #   server_name devmess.cloud www.devmess.cloud _;
              
            #   # Increase buffer sizes for large requests
            #   client_max_body_size 50M;
            #   client_body_buffer_size 128k;
              
            #   root /var/www/devmess/frontend_dist;
            #   index index.html;

            #   # API endpoints - forward to Go backend and preserve original path
            #   # Note: do NOT include a trailing slash in proxy_pass so Nginx will
            #   # forward the full original request path (e.g. /api/v1/...) to backend.
            #   location /api/ {
            #     proxy_pass http://127.0.0.1:8080;
            #     proxy_redirect off;

            #     proxy_set_header Host $host;
            #     proxy_set_header X-Real-IP $remote_addr;
            #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #     proxy_set_header X-Forwarded-Proto $scheme;
            #     proxy_set_header X-Forwarded-Host $host;

            #     proxy_connect_timeout 60s;
            #     proxy_send_timeout 60s;
            #     proxy_read_timeout 60s;
            #   }
            #   location /ping {
            #     proxy_pass http://127.0.0.1:8080/ping;
            #     proxy_redirect off;

            #     proxy_set_header Host $host;
            #     proxy_set_header X-Real-IP $remote_addr;
            #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #     proxy_set_header X-Forwarded-Proto $scheme;
            # }
            #   # WebSocket endpoint
            #   location /ws/ {
            #       proxy_pass http://127.0.0.1:8080/ ;
            #       proxy_http_version 1.1;
            #       proxy_set_header Upgrade $http_upgrade;
            #       proxy_set_header Connection "upgrade";
            #       proxy_set_header Host $host;
            #   }

            #   # Frontend - must be last to avoid catching API routes
            #   location / {
            #     try_files $uri $uri/ /index.html;
            #   }

            #   # Custom error pages
            #   error_page 502 503 504 /50x.html;
            #   location = /50x.html {
            #     root /usr/share/nginx/html;
            #   }
            # }
            EOF'

            sudo ln -sf /etc/nginx/sites-available/devmess.conf /etc/nginx/sites-enabled/devmess.conf

            # Test nginx config
            echo "🔍 Testing Nginx configuration..."
            sudo nginx -t

            if [ $? -eq 0 ]; then
              sudo systemctl reload nginx
              echo "✅ Nginx configured and reloaded."
            else
              echo "❌ Nginx configuration test failed!"
              exit 1
            fi

            # Final connectivity test
            echo "🔍 Testing backend connectivity..."
            curl -v http://127.0.0.1:8080/api/v1/health || echo "⚠️ Backend health check failed"

            echo "✅ Deployment completed."
