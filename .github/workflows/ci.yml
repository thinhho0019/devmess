name: CI/CD Pipeline webchat devmess

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ---------- FRONTEND (React Vite) ----------
  frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: client/package-lock.json
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint
        
      - name: Run tests
        run: npm test -- --watchAll=false

      - name: Build Vite project
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: client/dist

  # ---------- BACKEND (Go) ----------
  backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        run: go mod tidy

      - name: Run Go tests
        run: go test ./...

      - name: Build Go binary
        run: go build -o app main.go

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: server/app
  # ---------- DEPLOY ----------
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      # - name: Download backend artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: backend-app
      #     path: app

      # Copy everything needed to server
      - name: Copy files via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: |
            dist/*
            app/*
            docker-compose.yaml
          target: /var/www/devmess

      # SSH vÃ o server Ä‘á»ƒ setup & run docker compose
      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "ðŸš€ Checking Docker installation..."
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update -y
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            fi

            cd /var/www/devmess
            echo "ðŸ§© Pulling new Docker setup..."
            docker compose down
            docker compose up -d --build

            echo "âœ… Deployment complete!"