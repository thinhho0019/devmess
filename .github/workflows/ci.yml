name: CI/CD Pipeline webchat devmess

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # ---------- FRONTEND (React Vite) ----------
  frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test -- --watchAll=false

      - name: Create .env file for production
        env:
          VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: echo "VITE_WS_URL=${VITE_WS_URL}" > .env

      - name: Build Vite project
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: client/dist

  # ---------- BACKEND (Go) ----------
  backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        run: go mod tidy

      - name: Run Go tests
        run: go test ./...

      - name: Build Go binary
        run: go build -o app main.go

      - name: Create .env
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URL: ${{ secrets.GOOGLE_REDIRECT_URL }}
          DEFAULT_URL: ${{ secrets.DEFAULT_URL }}
          DEFAULT_URL_SERVER: ${{ secrets.DEFAULT_URL_SERVER }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SPACES_KEY: ${{ secrets.SPACES_KEY }}
          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}
          SPACES_REGION: ${{ secrets.SPACES_REGION }}
          SPACES_BUCKET: ${{ secrets.SPACES_BUCKET }}
          SPACES_ENDPOINT: ${{ secrets.SPACES_ENDPOINT }}
        run: |
          cat > .env <<EOF
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          DB_NAME=${DB_NAME}
          GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
          GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
          GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL}
          DEFAULT_URL=${DEFAULT_URL}
          DEFAULT_URL_SERVER=${DEFAULT_URL_SERVER}
          JWT_SECRET_KEY=${JWT_SECRET_KEY}
          SMTP_EMAIL=${SMTP_EMAIL}
          SMTP_PASSWORD=${SMTP_PASSWORD}
          SPACES_KEY=${SPACES_KEY}
          SPACES_SECRET=${SPACES_SECRET}
          SPACES_REGION=${SPACES_REGION}
          SPACES_BUCKET=${SPACES_BUCKET}
          SPACES_ENDPOINT=${SPACES_ENDPOINT}
          EOF

          ls -la .env  # kiểm tra file đã tạo

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: server/app

      - name: Upload backend .env
        uses: actions/upload-artifact@v4
        with:
          name: backend-env
          path: .env

  # ---------- DEPLOY ----------
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-binary
          path: ./server_bin

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend_dist

      - name: Download backend .env
        uses: actions/download-artifact@v4
        with:
          name: backend-env
          path: ./server_env

      - name: Copy files to VPS via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "frontend_dist,server_bin/app,server_env/.env"
          target: /var/www/devmess

      - name: Setup Redis & PostgreSQL on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Redis
            if ! command -v redis-server &> /dev/null; then
              sudo apt update -y && sudo apt install -y redis-server
            fi
            sudo systemctl enable redis
            sudo systemctl start redis

            # PostgreSQL
            if ! command -v psql &> /dev/null; then
              sudo apt update -y && sudo apt install -y postgresql postgresql-contrib
              sudo -u postgres psql -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"
              sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DB_NAME }} OWNER ${{ secrets.DB_USER }};"
              sudo systemctl enable postgresql
              sudo systemctl start postgresql
            fi

      - name: Deploy Backend & Setup Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/devmess

            # Grant execute
            chmod +x server_bin/app

            # Copy .env
            cp server_env/.env .env

            # Setup systemd service
            sudo bash -c 'cat > /etc/systemd/system/devmess-backend.service <<EOF
            [Unit]
            Description=Go Backend for Devmess
            After=network.target
            [Service]
            User=root
            WorkingDirectory=/var/www/devmess
            ExecStart=/var/www/devmess/server_bin/app
            Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF'

            sudo systemctl daemon-reload
            sudo systemctl enable devmess-backend.service
            sudo systemctl restart devmess-backend.service

            # Setup Nginx
            if ! command -v nginx &> /dev/null; then
              sudo apt update -y && sudo apt install -y nginx
            fi

            su
