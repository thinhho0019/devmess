name: CI/CD Pipeline webchat devmess

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ---------- FRONTEND (React Vite) ----------
  frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: client/package-lock.json
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint
        
      - name: Run tests
        run: npm test -- --watchAll=false

      - name: Build Vite project
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: client/dist

  # ---------- BACKEND (Go) ----------
  backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dependencies
        run: go mod tidy

      - name: Run Go tests
        run: go test ./...

      - name: Build Go binary
        run: go build -o app main.go

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: server/app
    # ---------- DEPLOY ----------
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download server artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-binary
          path: . # T·∫£i file 'app' v√†o th∆∞ m·ª•c g·ªëc c·ªßa runner

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Copy files via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "dist,app" # Sao ch√©p th∆∞ m·ª•c 'dist' v√† file 'app'
          target: /var/www/devmess
          strip_components: 1 # Lo·∫°i b·ªè th∆∞ m·ª•c 'dist' cha, ch·ªâ sao ch√©p n·ªôi dung b√™n trong

      # SSH v√†o server ƒë·ªÉ setup & run
      - name: Deploy Backend & Setup Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # --- 1. Setup Backend ---
            cd /var/www/devmess
            echo "üîë Granting execute permission to Go binary..."
            chmod +x app

            echo "‚öôÔ∏è Creating systemd service for backend..."
            cat << 'EOF' | sudo tee /etc/systemd/system/devmess-backend.service
            [Unit]
            Description=Go Backend for Devmess
            After=network.target

            [Service]
            User=root
            WorkingDirectory=/var/www/devmess
            ExecStart=/var/www/devmess/app
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF

            echo "üîÑ Reloading systemd and starting backend service..."
            sudo systemctl daemon-reload
            sudo systemctl enable devmess-backend.service
            sudo systemctl restart devmess-backend.service
            echo "‚úÖ Backend is now running via systemd!"

            # --- 2. Setup Nginx for Frontend ---
            echo "üöÄ Checking Nginx installation..."
            if ! command -v nginx &> /dev/null; then
              sudo apt update -y && sudo apt install -y nginx
            fi

            echo "üîß Configuring Nginx reverse proxy..."
            cat << 'EOF' | sudo tee /etc/nginx/sites-available/devmess
            server {
                listen 80;
                server_name devmess.cloud www.devmess.cloud; # Thay b·∫±ng domain c·ªßa b·∫°n

                # Serve frontend files
                root /var/www/devmess;
                index index.html;

                location / {
                    try_files $uri /index.html;
                }

                # Proxy WebSocket connections
                location /ws {
                    proxy_pass http://127.0.0.1:8080; # Go backend address
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_set_header Host $host;
                }
            }
            EOF

            sudo ln -sf /etc/nginx/sites-available/devmess /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            echo "üîÑ Testing and restarting Nginx..."
            sudo nginx -t
            sudo systemctl restart nginx
            echo "‚úÖ Nginx setup complete!"